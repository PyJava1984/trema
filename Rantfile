#
# Copyright (C) 2008-2013 NEC Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#


$LOAD_PATH.unshift File.expand_path( File.join File.dirname( __FILE__ ), "ruby" )
$LOAD_PATH.unshift File.expand_path( File.join File.dirname( __FILE__ ), "vendor", "ruby-ifconfig-1.2", "lib" )


require "trema/executables"
require "trema/path"
require "trema/dsl/parser"
require "trema/version"

import "c/dependencies"
import "directedrule"


################################################################################
# Main tasks
################################################################################

desc "Build trema."
task :default => [
  "libtrema:static",
  :management_commands,
  :rubylib,
  :switch_manager,
  :switch_daemon,
  :packetin_filter,
  :tremashark,
  :vendor,
  :examples
]


task :examples do
  sys "rake examples"
end


import "clean"

desc "Cleanup generated files."
gen Clean

var[ :clean ] << Trema.objects
var[ :clean ] << File.join( Trema.home, "objects/unittests" )
var[ :clean ] << File.join( Trema.home, "unittests/objects" )
var[ :clean ] << Trema::DSL::Context::PATH


desc "Cleanup everything."
task :distclean => :clean


desc "Generate build.rb."
task :buildrb do
  sys "rant-import --force --imports c/dependencies,directedrule,clean,sys/tgz build.rb"
  sys "chmod +x build.rb"
end


################################################################################
# Helpers
################################################################################

def objects path
  File.join Trema.objects, path
end


def dependency name
  file = ".#{ name }.dependency"
  var[ :clean ] << file
  ".#{ name }.dependency"
end


################################################################################
# !!!!!! DO NOT MODIFY !!!!!!
################################################################################

var :CFLAGS => "-g -std=gnu99 -D_GNU_SOURCE -fno-strict-aliasing -Werror -Wall -Wextra -Wformat=2 -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wfloat-equal -Wpointer-arith"


################################################################################
# Run cbench benchmarks.
################################################################################

desc "Run the c cbench switch controller to benchmark"
task :cbench => "cbench:ruby"


desc "Run the ruby cbench switch controller to benchmark"
task "cbench:ruby" do
  sys "rake cbench:ruby"
end


desc "Run the c cbench switch controller to benchmark"
task "cbench:c" do
  sys "rake cbench:c"
end


desc "Run cbench with profiling enabled."
task "cbench:profile" do
  sys "rake cbench:profile"
end


################################################################################
# Build vendor/*
################################################################################

import "sys/tgz"


task :vendor do
  sys "rake vendor"
end

task :distclean => :clobber

task :clobber do
  sys "rake clobber"
end


#
# OpenFlow reference implementation
#

gen Directory, Trema.objects

task "vendor:openflow" => Trema.openflow_h
file Trema.openflow_h do
  sys "rake vendor:openflow"
end


#
# Use the Stanford openflow reference software to compile and copy the
# wireshark plugin to enable viewing of openflow messages. The plugin
# would be compiled and copied to your home directory
# (.wireshark/plugins)
#
desc "Build openflow wireshark plugin"
task :openflow_wireshark_plugin do
  sys "rake openflow_wireshark_plugin"
end


#
# cmockery
#

task "vendor:cmockery" => Trema.libcmockery_a
file Trema.libcmockery_a do
  sys "rake vendor:cmockery"
end


################################################################################
# Build libtrema.{a,so}
################################################################################

libtrema = File.join( Trema.lib, "libtrema.a" )
libtrema_so = File.join( Trema.lib, "libtrema.so." ) + Trema::VERSION
libtrema_gcov = File.join( "#{ Trema.home }/objects/unittests", "libtrema.a" )

desc "Build trema library (static library)."
task "libtrema:static" => libtrema
file libtrema do | t |
  sys "rake libtrema:static"
end

desc "Build trema library (shared library)."
task "libtrema:shared" => libtrema_so
file libtrema_so do | t |
  sys "rake libtrema:shared"
end

desc "Build trema library (coverage)."
task "libtrema:gcov" => libtrema_gcov
file libtrema_gcov do | t |
  sys "rake libtrema:gcov"
end


################################################################################
# Build trema.so (ruby library)
################################################################################

desc "Build ruby library."
task :rubylib do
  sys "rake rubylib"
end


################################################################################
# Build switch manager
################################################################################

desc "Build switch manager."
task :switch_manager do
  sys "rake switch_manager"
end


desc "Build switch."
task :switch_daemon do
  sys "rake switch_daemon"
end


################################################################################
# Build packetin filter
################################################################################

desc "Build packetin filter."
task :packetin_filter do
  sys "rake packetin_filter"
end


################################################################################
# tremashark
################################################################################

desc "Build tremashark."
task :tremashark do
  sys "rake tremashark"
end


################################################################################
# Build management commands
################################################################################

task :management_commands do
  sys "rake management_commands"
end


################################################################################
# Unit tests.
################################################################################

desc "Run unittests"
task :unittests do
  sys "rake unittests"
end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:
